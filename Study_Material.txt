/*     */
Golang playground

Terminal
----------
CLI+graphical user interface
Command line userinterface
terminal : user input output command line 

Bash on Windows
----------------
Install github and add the windows bash.
Bash emulator on Windows.


Shell/Bash command
-------------------
pwd = present working directly - current directory structure 
ls = list of all the directory in this current directory
ls -la = list of directory with permission on it
	- permissions
		-owner,group, world
		-r,w,x
		-4,2,1
d= directory
rwxrwxrwx = owner,group,world
clear = clear all the command 
cd = change directory
cd../  = change directory to go up one level of the directory.
mkdir - make directory ,also multiple directories in one command
ex: mkdir tempOne tempTwo tempThree

touch text.txt  = this will create a file with one.txt.
nano text.txt  = this will create a file and open it for writing also.
cat one.txt   = this command is used to see the content of the file.

chmod = is used to allow the permission to be provided 
	chmod option permission filename
	chmod 777 temp.txt
env = provides the details of enviornmental variables 
rm <file name>= remove files 
rm -rf <folder> = used to removed the directory.

grep 
	cat temp2.txt | grep <word>  - this show the line the <word> id getting used 
	ls | grep -i documents
-----------------------------------------------------------------------------------------------------------------------------------
Installing Go lang 
-------------------
To check the sha256 checksum of the installed Go lang for windows do the following commands
$cd Downloads/
$ls
$openssl sha -sha256 go1.9.3.windows-amd64.msi
the above command wil show you the exact sha256 for this installer
-------------------------------------------------------------------
go command
-----------
Go is a tool for managing Go source code.

$go env  - shows the go path and go root 
go version - shows the go version 
go help - provides the list of all the command we can use in go

--------------------------------------------------------------------------------
Go Workspace
-------------
one folder - any name , any location 
	bin 
	pkg
	src
		github.com
				<github.com username>
					folder with code for project / repo
					folder with code for project / repo
					folder with code for project / repo
					folder with code for project / repo
					folder with code for project / repo
					......
					folder with code for project / repo
	
namespacing
go get 
	package management 
GOPATH
	points to your go workspace
GOROOT
	points to your binary installation of Golang
-------------------------------------------------------------------------
Enviornment Variable
---------------------
GOPATH - points to the go workspace 
GOROOT - points to the binary downloaded.

GO Commands
------------
go version
go env
go help
go find
go get 
		go get -d github.com/GoesToEleven/go-programming
		go get -d github.com/GoesToEleven/GolangTraining
		go get -d github.com/GoesToEleven/golang-web-dev
		
go fmt - will format all the files as per go.
		./...
go run  - will build and run the file 
		need a filename eg. go run main.go
		go run <filename>
		go run *.go
		
go build 
		for an executable:
			builds the file 
			reports errors, if any 
			if there are no errors , it puts an executable into the current folder
		for a package:
			BILUDS A FILE 
			reports errors, if any
			throws away binary

go install
	for an executable:
		compiles the program(builds it)
		names the executable 
			mac : the folder name holding the code
			windows : filename
		puts the executable in workspace/bin
				$GOPATH/bin
	for a package:
		compiles the package(builds it)
		puts the exectable in workspace/pkg	
				$GOPATH/pkg
		makes it an archive file
		
--------------------------------------------------------------------------------------------------------------------------------
Github repos
-------------
Git Commands:
	git status
	git add -all
	git commit -m "some message"
	git push
	
Github Explored:
	create a repository in my git login : meenal.walokar@gmail.com *vivaan#124
	Now got that reporsitory on my go lang workspace by command  --> go get -d github.com/meenalghade/Golang
	
	
	Generating the SSH key for windows
	ssh-keygen -t rsa    add the generated key to the github login through ui
	
	now use the following command 
	
	git clone <path of ssh from the github>
	git status
	git add --all
	git commit -m "<message to add>"
	git push
	
go fmt ./...   - this command will format all the file in go lang progrmamming language 
----------------------------------------------------------------------------------------------------------------
The Go Playground  http://play.golang.org
------------------
Run - Run the go programs on this 
Format - use the format to format the go program 
imports - will add import for ur go program 
share - to share the link of ur go program to others 


----------------------------------------------------------------------------------------------------------------

Package:
---------
https://golang.org/pkg/  - here u will get all the packages for go lang 
org
http://godoc.org/<package name> like fmt, http , template

now how to use the fmt.Println(),method is define in package as 
func Println(a ...interface{})(n int, err error)

So println is a function which takes unlimited number of parameters, of any type, thats what the empty 
interface parameter  means. And (returns an int and error ).It returns the number of bytes written and 
any write error encountered. 

If we want to use the n and error of println we uase in following way:

n, err := fmt.Println("Hello World",42,true)
fmt.Println(n)
fmt.Println(err)

if u dont waht to use the 'err' parameter then we can use the '_'

n, _ := fmt.Println("Heelo",43,false)
fmt(Println(n)

We cannot use any other variable other than 'err' or '_'.

We use this notation in Go
	package.Identifier
		ex: fmt.Println() - from package fmt we are using the Println function
		an Identifier is the name of the variable,constant, func
	
	packages	
		code that is already written which you can use.
		imports
		
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Short decalration operators:
----------------------------
Identifiers : name program entities such as variable and type. A sequence of one or more letters and didgits. this first character in an identified must be a letter.
identifier = letter { letter | unicode_digit}
		
Predeclared identifiers :
Types:			 
	bool byte int int8 int16 int32 int64 complex64 complex128 uintptr
	error float32 float64 rune string uint uint8 uint16 uint32 uint64 
	
Constants: 
	true false iota
Zero Value: 
	nil
Functions:
	append cap close complex copy delete imag len
	make new panic print println real recover

Keywords:
Keyworks are reserved words and cannot be used as identifiers 
ex: break if func select struct switch type var go map interface 
	else goto package default defer fallthrough range return const 
	chan case import continue for 
	
Operators and Punctuation:
 := -- is a short declaration operator. In this we declaring a new variable and assiging value to it for the first time.
 = -- this sign is used to assign a value to the 

2 + 2 -- in this 2 is the operand and + is operator
		
Statement --  It is an instruction that commands the computer to perform a specific action.
Expression  -- In programming an expression is a combination of one or more explicit values, constants , variables , operators and function 
				that the programming language interprets and computes to produces another value. For example 2+2 is and expression that evaluates to 5.
				
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The var keyword
----------------			
var -- is used to decalre a variable.
() -- parenthesis 
{} --  curely braces 


Exploring Types
----------------
a VARIABLE is DECLARED to hold the VALUE of certain TYPE

Zero VALUE
-----------
declare a variable of certain type and then assign the value of that to the variable
Understanding zerp value 
	false for boolean
	0 for uintegers
	0.0 for floats 
	"" for strings 
	nil for 
		pointers 
		functions
		interfaces 
		slices
		channels
		maps
		
use short declaration operator.
use var for 
	zero value	
	package scope
	
The fmt package
----------------
%v - the value in the default format.
		when printing structs, the plus flag(%+v) adds field value.
%#v - the go-syntax representation of value.
%T - th Go-syntax representation of the type of value
%% - a literal percentage sign;consume no value

Format Printing:
group1 - general printing to standard output
	Print(a... interface{})(n int , err error)
	Printf(format string, a... interface{})(n int, err error)
	Println(a ...interface{})(n int, err error)
group2 - priting to a String which u can assign to a variable
	Sprint(a ...interface{}) string
	Sprintf(format string, a ...interface{}) string
	Sprintln(a ...interface{}) string
group3 - printing to a fuile or a web server response
	Fprint(w io.Writer, a ...interface{}) (n int, err error)
	Fprintf(w io.Writer,format string, a ...interface{}) (n int, err error)
	Fprintln(w io.Writer, a ...interface{})(n int err error)
	
Creating your own type
-----------------------
We can create our own type in Go Lang programming 

Syntax : type <name> datatye
eg. type cheese int


Conversion , no casting
Eg.  var x int 
	type cheese int 
	var y cheese
	
	but x=y // this will give the error as this can't be done directly.
	//hence conversion is required
	
	x= int(y) // this a acceptable and give assign the value of y to x 
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Bool type
----------
Boolean data type has two values either true or false .
this data type can be used in checking the condition where the condition has two values 

i.e. true or false.

-------------------------------------------------------------------------------------------------------------------------------------------------------------

How computer works
-------------------
computer runs on electricity 
electricity can be ON or OFF
coding schemes
	assign meaning to ON or OFF state 
	porch light on holloween(2 to the power of n where n is number of porch lights
		1 porch light = 2 messages 
		2 porch light = 4 messages
		3 porch lights = 8 messages 
		4 porch lights = 16 messages
		5 porch lights = 32 messages
		6 porch lights = 64 messages 
		7 porch lights = 128 messages 
		8 porch lights = 256 messages

Binary Digits = Bits
--         --
Binar digits has values in with 0 and 1 
and combination of 0's and 1's is bits
eg. 8 - 1 0 0 0
Measuring Bits
1 bit
8 bits = 1 byte
1000 bytes = kb
1000 kb = mb
1000 mb = gb
1000 gb = tb

Generation of computers 
1.Vacuum tubes
2.Transistors
3.Integrated circuits (chips)
4.Microprocessors (cpu's)

-----------------------------------------------------------------------------------------------------------------------

Numeric type
-------------
Interger has no decimal numbers, those are also called as whole numbers.
Floating point numbers are having decimals in it.Also known as real numbers.Fraction of things and have decimals.

By default , datatype for interger value is int and for float point value is float64.
 			
In int there are signed and unsigned.The signed int will take +ve als well as +ve values.
whereas unsigned int will take only +ve values.
		
String type
------------
String type represents the set of string values.
A string value is a (possible empty) sequence of bytes.
String are immutable , once created, it is impossible to change the content of a string.
length of string = its size in bytes
its illegal to take address of such string.
s[i] = ith byte of a string
&s[i] is invalid.

rune is an alias for int32

Numeral System
---------------

Decimal:  In this we have 0-9 digits to work with.
		  10^0 = Ones 
		  10^1 = Tens
		  10^2 = Hundred 
		  10^3 = Thousand
		  10^4 = Ten Thousand 
		  10^5 = Hundred Thousand 
		  10^6 = Millions
		  10^7 = Ten Millions
		  
Binary:   In this we have only two digits 0 and 1
		  2^0 = 1
		  2^1 = 2
		  2^2 = 4
		  2^3 = 8
		  2^4 = 16
		  2^5 = 32
		  2^6 = 64
		  2^7 = 128
		 
Hexa-decimal: In this the digits used are 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f.
where a=10, b=11,c=12,d=13,e=14,f=15.
		  16^0 = Ones 
		  16^1 = 16's
		  16^2 = 256's
		  16^3 = 4096's
		  16^4 = 65536's
		  16^5 = 
		  16^8 = 
			
-------------------------------------------------------------------------------------------------------------------------------------------------------
Constants
---------			
Type constant and untype constants.

eg. const a = 42			
	const b string = "Hello world"
	
Iota
-----
Iota is a predefined identifier.It is alwys declared with const keyword.

eg. const ( 
			a= iota 
			b 
			c
		)
	const ( 
			d= iota
			e
			f
		)
	output is 0 1 2 0 1 2 
	Everytime the new const word it found the iota value is reset to 0.
	
	
Bit Shifting  (<<(shift to right ) or >>(shift to left)
-------------------------------------------------------
	
			
			
			
SEction 8 
----------
Control flow : is the order in which a individual statement,instructions or function call of imperative programs are executed or evaluated.
Loop: init , condition , post 
eg. for init;condition;post 
in Golang there is no while loop
Loop - nesting loops 

Nested loop:
------------
Bubble Sort :  is the simpest algorithm that works on repeated swipping the adjecent elements if they are in the wrong order.

Selection Sort: algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) 
from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.

1) The subarray which is already sorted.
2) Remaining subarray which is unsorted.

Loop - for statement
---------------------
A "for " statement specified repeated execution of a block.
1.for statements with single condition : 
									e.g.for a<b {
											a *=2
										}
2.For statement with for clause
e.g. forcaluse = [InitStmt] : [Codition] : [PostStmt]
InitStmt = SimpleStmt
PostStmt = SimpleStmt
Note: you can use for with nothing but can have if condition in the block 
3. For statement with range clause
e.g. 
			


Loop break and continue 
------------------------
both of them are keywords in golang 
write a program to use break and continue by printing even number from 0 top 100 

Loop printing ascii
--------------------
format string from 33 to 122 for ascii characters are '%#U'.

Conditional if Statements
--------------------------
if statements 
	a.bool value 
		true 
		false 
	b.the not operators 
		!
	c.initialization statement: in this we initialise a value in if and also add condtion
	e.g. if x := 42 ; x< 2 {
			//code of bolck
	}
	d.if/else
	e.if /else if / else
	f.if / else if /else if ........./else
	
Loop condition modules
-----------------------
cdone an example to find all even number from 0 to 100.

Conditional switch statement:
-----------------------------
switch will have true/false , expression , condition in the cases.

Conditional - switch statement documentation:
---------------------------------------------
cases can be presented in comma-seperated list
e.g. : switch c {
		case '','?','&','=','+','%':
			return true
		}
		return false
		
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Conditonal logical operators:
-----------------------------
&& - and operator 
|| - or  operator 
!  - negate operator
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Arrays:
--------
We have specify the size e.g.: var x [5]int
Array is zero based index.The number of elements is called length and is never negative.

Slices:composite literal
-------------------------
syntax : x := type{values}   ///composite literal
A slice llow youto group together VALUES of the same TYPES

Slice for range 
----------------
syntax: for key, value := range oldMap {
			newMap[key] = value
		}

Slicing the slice:[:]
----------------------
append(<slice>, <value>....)
delete - append(<slice in [:]> , <slice in [:]>...)
make - make(<slice>, length, capacity)

Multidimensional slice:
------------------------
x := [][]string{<slice>,<slice>}

Map:are key value store. Its unordered list.
--------------------------------------------
map<[key]><value>{...} // this is composite values 
separate the key with value with a colon ':'

Map - add element and range:
----------------------------
to add and entry to the map we have 
m[<key>] = <value>

for k, v := range <map> {
	fmt.Println(k,v)
	}
	
Map delete 
-----------
delete (<map name>, "key")


Struct:
-------
	
			
			
			
			
			
			
			
			

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


section 10 lecture 73  19 Dec 2018
---------------------------------------------
		
		https://sets.mahagenco.in/mspgclsets/mailContentView.action?1=1&emailId=13928745
		old version of SeTS had the STQC but the present set does not have 

		During Rahul period he has initiated the process to Sr.GM for STQC 