/*     */
Golang playground

Terminal
----------
CLI+graphical user interface
Command line userinterface
terminal : user input output command line 

Bash on Windows
----------------
Install github and add the windows bash.
Bash emulator on Windows.


Shell/Bash command
-------------------
pwd = present working directly - current directory structure 
ls = list of all the directory in this current directory
ls -la = list of directory with permission on it
	- permissions
		-owner,group, world
		-r,w,x
		-4,2,1
d= directory
rwxrwxrwx = owner,group,world
clear = clear all the command 
cd = change directory
cd../  = change directory to go up one level of the directory.
mkdir - make directory ,also multiple directories in one command
ex: mkdir tempOne tempTwo tempThree

touch text.txt  = this will create a file with one.txt.
nano text.txt  = this will create a file and open it for writing also.
cat one.txt   = this command is used to see the content of the file.

chmod = is used to allow the permission to be provided 
	chmod option permission filename
	chmod 777 temp.txt
env = provides the details of enviornmental variables 
rm <file name>= remove files 
rm -rf <folder> = used to removed the directory.

grep 
	cat temp2.txt | grep <word>  - this show the line the <word> id getting used 
	ls | grep -i documents
-----------------------------------------------------------------------------------------------------------------------------------
Installing Go lang 
-------------------
To check the sha256 checksum of the installed Go lang for windows do the following commands
$cd Downloads/
$ls
$openssl sha -sha256 go1.9.3.windows-amd64.msi
the above command wil show you the exact sha256 for this installer
-------------------------------------------------------------------
go command
-----------
Go is a tool for managing Go source code.

$go env  - shows the go path and go root 
go version - shows the go version 
go help - provides the list of all the command we can use in go

--------------------------------------------------------------------------------
Go Workspace
-------------
one folder - any name , any location 
	bin 
	pkg
	src
		github.com
				<github.com username>
					folder with code for project / repo
					folder with code for project / repo
					folder with code for project / repo
					folder with code for project / repo
					folder with code for project / repo
					......
					folder with code for project / repo
	
namespacing
go get 
	package management 
GOPATH
	points to your go workspace
GOROOT
	points to your binary installation of Golang
-------------------------------------------------------------------------
Enviornment Variable
---------------------
GOPATH - points to the go workspace 
GOROOT - points to the binary downloaded.

GO Commands
------------
go version
go env
go help
go find
go get 
		go get -d github.com/GoesToEleven/go-programming
		go get -d github.com/GoesToEleven/GolangTraining
		go get -d github.com/GoesToEleven/golang-web-dev
		
go fmt - will format all the files as per go.
		./...
go run  - will build and run the file 
		need a filename eg. go run main.go
		go run <filename>
		go run *.go
		
go build 
		for an executable:
			builds the file 
			reports errors, if any 
			if there are no errors , it puts an executable into the current folder
		for a package:
			BILUDS A FILE 
			reports errors, if any
			throws away binary

go install
	for an executable:
		compiles the program(builds it)
		names the executable 
			mac : the folder name holding the code
			windows : filename
		puts the executable in workspace/bin
				$GOPATH/bin
	for a package:
		compiles the package(builds it)
		puts the exectable in workspace/pkg	
				$GOPATH/pkg
		makes it an archive file
		
--------------------------------------------------------------------------------------------------------------------------------
Github repos
-------------
Git Commands:
	git status
	git add -all
	git commit -m "some message"
	git push
	
Github Explored:
	create a repository in my git login : meenal.walokar@gmail.com *vivaan#124
	Now got that reporsitory on my go lang workspace by command  --> go get -d github.com/meenalghade/Golang
	
	
	Generating the SSH key for windows
	ssh-keygen -t rsa    add the generated key to the github login through ui
	
	now use the following command 
	
	git clone <path of ssh from the github>
	git status
	git add --all
	git commit -m "<message to add>"
	git push
	
go fmt ./...   - this command will format all the file in go lang progrmamming language 
----------------------------------------------------------------------------------------------------------------
The Go Playground  http://play.golang.org
------------------
Run - Run the go programs on this 
Format - use the format to format the go program 
imports - will add import for ur go program 
share - to share the link of ur go program to others 


----------------------------------------------------------------------------------------------------------------

Package:
---------
https://golang.org/pkg/  - here u will get all the packages for go lang 
org
http://godoc.org/<package name> like fmt, http , template

now how to use the fmt.Println(),method is define in package as 
func Println(a ...interface{})(n int, err error)

So println is a function which takes unlimited number of parameters, of any type, thats what the empty 
interface parameter  means. And (returns an int and error ).It returns the number of bytes written and 
any write error encountered. 

If we want to use the n and error of println we uase in following way:

n, err := fmt.Println("Hello World",42,true)
fmt.Println(n)
fmt.Println(err)

if u dont waht to use the 'err' parameter then we can use the '_'

n, _ := fmt.Println("Heelo",43,false)
fmt(Println(n)

We cannot use any other variable other than 'err' or '_'.

We use this notation in Go
	package.Identifier
		ex: fmt.Println() - from package fmt we are using the Println function
		an Identifier is the name of the variable,constant, func
	
	packages	
		code that is already written which you can use.
		imports
		
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Short decalration operators:
----------------------------
Identifiers : name program entities such as variable and type. A sequence of one or more letters and didgits. this first character in an identified must be a letter.
identifier = letter { letter | unicode_digit}
		
Predeclared identifiers :
Types:			 
	bool byte int int8 int16 int32 int64 complex64 complex128 uintptr
	error float32 float64 rune string uint uint8 uint16 uint32 uint64 
	
Constants: 
	true false iota
Zero Value: 
	nil
Functions:
	append cap close complex copy delete imag len
	make new panic print println real recover

Keywords:
Keyworks are reserved words and cannot be used as identifiers 
ex: break if func select struct switch type var go map interface 
	else goto package default defer fallthrough range return const 
	chan case import continue for 
	
Operators and Punctuation:
 := -- is a short declaration operator. In this we declaring a new variable and assiging value to it for the first time.
 = -- this sign is used to assign a value to the 

2 + 2 -- in this 2 is the operand and + is operator
		
Statement --  It is an instruction that commands the computer to perform a specific action.
Expression  -- In programming an expression is a combination of one or more explicit values, constants , variables , operators and function 
				that the programming language interprets and computes to produces another value. For example 2+2 is and expression that evaluates to 5.
				
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The var keyword
----------------			
var -- is used to decalre a variable.
() -- parenthesis 
{} --  curely braces 


Exploring Types
----------------
a VARIABLE is DECLARED to hold the VALUE of certain TYPE

Zero VALUE
-----------


			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


section 3 lecture 22   07 Dec 2018
---------------------------------------------
		
		https://sets.mahagenco.in/mspgclsets/mailContentView.action?1=1&emailId=13928745
		old version of SeTS had the STQC but the present set does not have 

		During Rahul period he has initiated the process to Sr.GM for STQC 